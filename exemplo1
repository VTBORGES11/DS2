# Camada de Entidades

class Produto:
    def _init_(self, nome, preco):
        self.nome = nome
        self.preco = preco

class Pedido:
    def _init_(self, produtos):
        self.produtos = produtos
        self.total = sum([p.preco for p in self.produtos])
    
    def adicionar_produto(self, produto):
        self.produtos.append(produto)
        self.total += produto.preco
    
    def remover_produto(self, produto):
        if produto in self.produtos:
            self.produtos.remove(produto)
            self.total -= produto.preco


# Camada de Casos de Uso

class RealizarPedido:
    def _init_(self, pedido_repo):
        self.pedido_repo = pedido_repo
    
    def executar(self, produtos):
        pedido = Pedido(produtos)
        self.pedido_repo.adicionar_pedido(pedido)
        return pedido
    
class ListarPedidos:
    def _init_(self, pedido_repo):
        self.pedido_repo = pedido_repo
    
    def executar(self):
        return self.pedido_repo.listar_pedidos()

class RemoverPedido:
    def _init_(self, pedido_repo):
        self.pedido_repo = pedido_repo
    
    def executar(self, pedido_id):
        pedido = self.pedido_repo.buscar_pedido(pedido_id)
        if not pedido:
            return False
        self.pedido_repo.remover_pedido(pedido)
        return True


# Camada de Adaptadores

import random

class PedidoRepo:
    def _init_(self):
        self.pedidos = []
    
    def adicionar_pedido(self, pedido):
        pedido.id = random.randint(1, 1000)
        self.pedidos.append(pedido)
    
    def listar_pedidos(self):
        return self.pedidos
    
    def buscar_pedido(self, pedido_id):
        for pedido in self.pedidos:
            if pedido_id == pedido.id:
                return pedido
        return None
    
    def remover_pedido(self, pedido):
        self.pedidos.remove(pedido)

pedido_repo = PedidoRepo()

# Testando a aplicação

realizar_pedido = RealizarPedido(pedido_repo)
listar_pedidos = ListarPedidos(pedido_repo)
remover_pedido = RemoverPedido(pedido_repo)

# Realizar um pedido
produtos = [Produto("Camiseta", 50), Produto("Calça", 100), Produto("Sapato", 150)]
pedido = realizar_pedido.executar(produtos)
print(f"Pedido realizado com sucesso! ID do pedido: {pedido.id}")

# Listar todos os pedidos
print("Lista de todos os pedidos:")
for pedido in listar_pedidos.executar():
    print(pedido.produtos, pedido.total)

# Remover um pedido
pedido_id = pedido.id
resultado = remover_pedido.executar(pedido_id)
if resultado:
    print(f"Pedido com ID {pedido_id} removido com sucesso!")
else:
    print(f"Não foi possível remover o pedido com ID {pedido_id}")
Neste exemplo, temos as entidades Produto e Pedido, a camada de casos de uso com RealizarPedido, ListarPedidos e RemoverPedido, e a camada de adaptadores com PedidoRepo que usa uma lista para armazenar os pedidos em memória.

A regra de dependência é mantida, pois a camada de adaptadores depende das entidades, mas as entidades e as camadas de uso
